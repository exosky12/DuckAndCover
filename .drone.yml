kind: pipeline
type: docker
name: CI
trigger:
    branch:
        - master
    event:
        - push
steps:
  - name: Build
    image: mcr.microsoft.com/dotnet/sdk:9.0
    environment:
      CI: "true"  # Variable pour forcer les projets à ne pas cibler Android
    commands:
      - cd DuckAndCover/
      - dotnet restore DuckAndCoverWithoutMAUI.sln
      - dotnet build DuckAndCoverWithoutMAUI.sln -c Release --no-restore 
      - dotnet publish DuckAndCoverWithoutMAUI.sln -c Release --no-restore -o $CI_PROJECT_DIR/build/release
  
  - name: BuildMAUI
    image: hub.codefirst.iut.uca.fr/marc.chevaldonne/codefirst-dotnet9-maui:latest
    environment:
      CI: "true"
      BUILD_MAUI: "true"  # Variable pour activer les targets mobiles
    commands:
      - cd DuckAndCover/
      # Mise à jour des workloads si nécessaire
      - dotnet workload update || true
      # Restore des dépendances d'abord (projets net9.0 standard)
      - dotnet restore DTOs/DTOs.csproj
      - dotnet restore Models/Models.csproj  
      - dotnet restore DataPersistence/DataPersistence.csproj
      # Build des dépendances
      - dotnet build DTOs/DTOs.csproj -c Release
      - dotnet build Models/Models.csproj -c Release
      - dotnet build DataPersistence/DataPersistence.csproj -c Release
      # Restore et build du projet MAUI principal
      - dotnet restore DuckAndCover/DuckAndCover.csproj
      - dotnet build DuckAndCover/DuckAndCover.csproj -c Release -f net9.0-android /p:AndroidSdkDirectory=$ANDROID_SDK_ROOT -property:Aapt2ToolPath=$ANDROID_SDK_ROOT/build-tools/35.0.0
      # Publish du projet MAUI
      - dotnet publish DuckAndCover/DuckAndCover.csproj -c Release -f net9.0-android /p:AndroidSdkDirectory=$ANDROID_SDK_ROOT -property:Aapt2ToolPath=$ANDROID_SDK_ROOT/build-tools/35.0.0 -o $CI_PROJECT_DIR/build/release

  - name: Tests
    image: mcr.microsoft.com/dotnet/sdk:9.0
    commands:
      - cd DuckAndCover/
      - dotnet restore DuckAndCoverWithoutMAUI.sln
      - dotnet test DuckAndCoverWithoutMAUI.sln --no-restore

  - name: Code Inspection
    image: hub.codefirst.iut.uca.fr/marc.chevaldonne/codefirst-dronesonarplugin-dotnet9
    secrets: [ SECRET_SONAR_LOGIN ]
    environment:
      sonar_host: https://codefirst.iut.uca.fr/sonar/
      sonar_token:
        from_secret: SECRET_SONAR_LOGIN
      project_key: duckandcover
      coverage_exclusions: "UnitTests/**"
    commands:
      - cd DuckAndCover/
      - dotnet restore DuckAndCoverWithoutMAUI.sln
      - dotnet sonarscanner begin /k:$${project_key} /d:sonar.host.url=$${sonar_host} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions=$${coverage_exclusions} /d:sonar.login=$${sonar_token} 
      - dotnet build DuckAndCoverWithoutMAUI.sln -c Release --no-restore
      - dotnet test DuckAndCoverWithoutMAUI.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
      - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
      - dotnet sonarscanner end /d:sonar.login=$${sonar_token}

  - name: Docs
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-docdeployer
    failure: ignore
    volumes:
      - name: docs
        path: /docs
    commands:
      - echo "=== DEBUG: Checking file structure ==="
      - ls -la
      - ls -la Documentation/
      - echo "=== DEBUG: Checking doxygen file ==="
      - head -20 Documentation/doxygen
      - echo "=== DEBUG: Checking source directory ==="
      - ls -la DuckAndCover/ || echo "DuckAndCover directory not found"
      - find DuckAndCover/ -name "*.cs" | head -10 || echo "No .cs files found"
      - echo "=== DEBUG: Running entrypoint ==="
      - /entrypoint.sh
      - echo "=== DEBUG: Checking generated docs ==="
      - ls -la /docs/ || echo "/docs directory not found"
      - find /docs -name "*.html" | head -5 || echo "No HTML files generated"
    environment: 
      NOSWAGGER: true
      NODOCUSAURUS: true

volumes:
  - name: docs
    temp: {}