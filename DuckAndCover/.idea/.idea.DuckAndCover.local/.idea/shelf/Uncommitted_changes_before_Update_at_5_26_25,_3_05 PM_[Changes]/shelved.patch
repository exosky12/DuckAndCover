Index: Models/Game/Player.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Runtime.Serialization;\n\nnamespace Models.Game\n{\n    public class Player\n    {\n\n        [DataMember]\n        public string Name { get; init; }\n        [DataMember]\n        public bool HasSkipped { get; set; }\n        [DataMember]\n        public bool HasPlayed { get; set; }\n        [DataMember]\n        public List<int> Scores { get; }\n\n        public int TotalScore => Scores.Sum();\n\n        [DataMember]\n        public int StackCounter { get; set; }\n\n\n\n\n        public Player(string name)\n        {\n            this.StackCounter = 12;\n            this.Scores = new List<int>();\n            this.Name = name;\n            this.HasSkipped = false;\n            this.HasPlayed = false;\n        }\n\n        public Player(string name,int stack, List<int> scores,bool skipped,bool played,Grid grid)\n        {\n            this.Name = name;\n            this.StackCounter = stack ;\n            this.Scores = new List<int>();\n            this.HasSkipped=skipped;    \n            this.HasPlayed=played;\n            this.Grid = grid;\n        }\n\n\n\n        public Grid Grid { get; } = new Grid();\n\n\n        public bool HasCardWithNumber(int number)\n        {\n            foreach (var card in Grid.GameCardsGrid)\n            {\n                if (card.Number == number)\n                    return true;\n            }\n\n            return false;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/Game/Player.cs b/Models/Game/Player.cs
--- a/Models/Game/Player.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/Models/Game/Player.cs	(date 1748263844572)
@@ -2,15 +2,19 @@
 
 namespace Models.Game
 {
+    [DataContract]
     public class Player
     {
 
         [DataMember]
         public string Name { get; init; }
+        
         [DataMember]
         public bool HasSkipped { get; set; }
+        
         [DataMember]
         public bool HasPlayed { get; set; }
+        
         [DataMember]
         public List<int> Scores { get; }
 
@@ -20,7 +24,8 @@
         public int StackCounter { get; set; }
 
 
-
+        [DataMember]
+        public Grid Grid { get; } = new Grid();
 
         public Player(string name)
         {
@@ -40,12 +45,9 @@
             this.HasPlayed=played;
             this.Grid = grid;
         }
-
+        
 
 
-        public Grid Grid { get; } = new Grid();
-
-
         public bool HasCardWithNumber(int number)
         {
             foreach (var card in Grid.GameCardsGrid)
Index: DuckAndCover/Pages/GameMenu.xaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"DuckAndCover.Pages.GameMenu\"\n             ControlTemplate=\"{StaticResource BackgroundTemplate}\"\n             xmlns:components=\"clr-namespace:DuckAndCover.Views\">\n\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <Style x:Key=\"SectionTitleStyle\" TargetType=\"Label\">\n                <Setter Property=\"FontAttributes\" Value=\"Bold\" />\n                <Setter Property=\"FontSize\" Value=\"18\" />\n                <Setter Property=\"TextColor\" Value=\"#333333\" />\n                <Setter Property=\"Margin\" Value=\"0,0,0,8\" />\n            </Style>\n            \n            <Style x:Key=\"InputEntryStyle\" TargetType=\"Entry\">\n                <Setter Property=\"BackgroundColor\" Value=\"White\" />\n                <Setter Property=\"HeightRequest\" Value=\"55\" />\n                <Setter Property=\"FontSize\" Value=\"16\" />\n                <Setter Property=\"Margin\" Value=\"0,0,0,12\" />\n                <Setter Property=\"PlaceholderColor\" Value=\"#AAAAAA\" />\n                <Setter Property=\"TextColor\" Value=\"#333333\" />\n            </Style>\n            \n            <Style x:Key=\"SectionContainerStyle\" TargetType=\"StackLayout\">\n                <Setter Property=\"Spacing\" Value=\"4\" />\n                <Setter Property=\"Margin\" Value=\"0,12,0,12\" />\n                <Setter Property=\"WidthRequest\" Value=\"500\" />\n            </Style>\n        </ResourceDictionary>\n    </ContentPage.Resources>\n\n    <Grid Padding=\"20\" RowDefinitions=\"Auto,*,Auto\">\n        <Label Text=\"Configuration de la partie\" \n               FontSize=\"24\" \n               FontAttributes=\"Bold\" \n               HorizontalOptions=\"Center\"\n               Margin=\"0,20,0,30\"\n               TextColor=\"#222222\"\n               Grid.Row=\"0\" />\n               \n        <ScrollView Grid.Row=\"1\" Margin=\"0,0,0,20\">\n            <FlexLayout Direction=\"Column\"\n                      MaximumWidthRequest=\"800\"\n                      AlignItems=\"Center\"\n                      JustifyContent=\"SpaceEvenly\">\n\n                <Frame BackgroundColor=\"#F5F5F5\" \n                       BorderColor=\"#DDDDDD\"\n                       CornerRadius=\"12\"\n                       Padding=\"24\" \n                       Margin=\"12\"\n                       HasShadow=\"True\">\n                    <StackLayout Spacing=\"24\">\n                        <!-- Player Count Section -->\n                        <StackLayout Style=\"{StaticResource SectionContainerStyle}\">\n                            <Label Text=\"Nombre de joueurs\"\n                                   Style=\"{StaticResource SectionTitleStyle}\" />\n                            <Entry x:Name=\"PlayerCountEntry\"\n                                   Placeholder=\"Ex: 3\"\n                                   Keyboard=\"Numeric\"\n                                   Style=\"{StaticResource InputEntryStyle}\" />\n                        </StackLayout>\n\n                        <!-- Bot Toggle Section -->\n                        <StackLayout Style=\"{StaticResource SectionContainerStyle}\">\n                            <Label Text=\"ComplÃ©ter avec des bots ?\"\n                                   Style=\"{StaticResource SectionTitleStyle}\" />\n                            <Grid ColumnDefinitions=\"Auto,*\">\n                                <Switch x:Name=\"BotSwitch\"\n                                        IsToggled=\"True\"\n                                        OnColor=\"#4CAF50\"\n                                        ThumbColor=\"White\"\n                                        Toggled=\"BotSwitch_Toggled\" />\n                                <Label Grid.Column=\"1\" \n                                       Text=\"Activer les joueurs IA\"\n                                       VerticalOptions=\"Center\"\n                                       Margin=\"12,0,0,0\"\n                                       TextColor=\"#666666\" />\n                            </Grid>\n                        </StackLayout>\n\n                        <!-- Bot Count Section -->\n                        <StackLayout Style=\"{StaticResource SectionContainerStyle}\"\n                                     x:Name=\"BotCountSection\"\n                                     IsVisible=\"True\">\n                            <Label Text=\"Nombre de bots\"\n                                   Style=\"{StaticResource SectionTitleStyle}\"\n                                   x:Name=\"BotCountLabel\" />\n                            <Entry x:Name=\"BotCountEntry\"\n                                   Placeholder=\"Ex: 1\"\n                                   Keyboard=\"Numeric\"\n                                   Style=\"{StaticResource InputEntryStyle}\" />\n                        </StackLayout>\n                    </StackLayout>\n                </Frame>\n                <components:Button x:Name=\"ContinueBtn\"\n                                   Name=\"Continuer\"\n                                   Margin=\"10,0\"\n                                   Clicked=\"ContinueClicked\" />\n            </FlexLayout>\n            \n        </ScrollView>\n        \n        \n    </Grid>\n</ContentPage>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DuckAndCover/Pages/GameMenu.xaml b/DuckAndCover/Pages/GameMenu.xaml
--- a/DuckAndCover/Pages/GameMenu.xaml	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/DuckAndCover/Pages/GameMenu.xaml	(date 1747980994813)
@@ -5,32 +5,6 @@
              ControlTemplate="{StaticResource BackgroundTemplate}"
              xmlns:components="clr-namespace:DuckAndCover.Views">
 
-    <ContentPage.Resources>
-        <ResourceDictionary>
-            <Style x:Key="SectionTitleStyle" TargetType="Label">
-                <Setter Property="FontAttributes" Value="Bold" />
-                <Setter Property="FontSize" Value="18" />
-                <Setter Property="TextColor" Value="#333333" />
-                <Setter Property="Margin" Value="0,0,0,8" />
-            </Style>
-            
-            <Style x:Key="InputEntryStyle" TargetType="Entry">
-                <Setter Property="BackgroundColor" Value="White" />
-                <Setter Property="HeightRequest" Value="55" />
-                <Setter Property="FontSize" Value="16" />
-                <Setter Property="Margin" Value="0,0,0,12" />
-                <Setter Property="PlaceholderColor" Value="#AAAAAA" />
-                <Setter Property="TextColor" Value="#333333" />
-            </Style>
-            
-            <Style x:Key="SectionContainerStyle" TargetType="StackLayout">
-                <Setter Property="Spacing" Value="4" />
-                <Setter Property="Margin" Value="0,12,0,12" />
-                <Setter Property="WidthRequest" Value="500" />
-            </Style>
-        </ResourceDictionary>
-    </ContentPage.Resources>
-
     <Grid Padding="20" RowDefinitions="Auto,*,Auto">
         <Label Text="Configuration de la partie" 
                FontSize="24" 
@@ -53,7 +27,6 @@
                        Margin="12"
                        HasShadow="True">
                     <StackLayout Spacing="24">
-                        <!-- Player Count Section -->
                         <StackLayout Style="{StaticResource SectionContainerStyle}">
                             <Label Text="Nombre de joueurs"
                                    Style="{StaticResource SectionTitleStyle}" />
@@ -63,13 +36,12 @@
                                    Style="{StaticResource InputEntryStyle}" />
                         </StackLayout>
 
-                        <!-- Bot Toggle Section -->
                         <StackLayout Style="{StaticResource SectionContainerStyle}">
                             <Label Text="ComplÃ©ter avec des bots ?"
                                    Style="{StaticResource SectionTitleStyle}" />
                             <Grid ColumnDefinitions="Auto,*">
                                 <Switch x:Name="BotSwitch"
-                                        IsToggled="True"
+                                        IsToggled="False"
                                         OnColor="#4CAF50"
                                         ThumbColor="White"
                                         Toggled="BotSwitch_Toggled" />
@@ -81,7 +53,6 @@
                             </Grid>
                         </StackLayout>
 
-                        <!-- Bot Count Section -->
                         <StackLayout Style="{StaticResource SectionContainerStyle}"
                                      x:Name="BotCountSection"
                                      IsVisible="True">
Index: DuckAndCover/Pages/MenuPlayer.xaml.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using DTOs;\n\nnamespace DuckAndCover.Pages;\n\npublic partial class MenuPlayer : ContentPage\n{\n    private readonly GameSettingsDTO _gameSettings;\n\n    public MenuPlayer(GameSettingsDTO gameSettings)\n    {\n        InitializeComponent();\n        _gameSettings = gameSettings;\n\n        GeneratePlayerInputs();\n    }\n\n    private void GeneratePlayerInputs()\n    {\n        for (int i = 0; i < _gameSettings.PlayerCount; i++)\n        {\n            var entry = new Entry\n            {\n                Placeholder = $\"Nom du joueur {i + 1}\"\n            };\n            PlayerInputsLayout.Children.Add(entry);\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DuckAndCover/Pages/MenuPlayer.xaml.cs b/DuckAndCover/Pages/MenuPlayer.xaml.cs
--- a/DuckAndCover/Pages/MenuPlayer.xaml.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/DuckAndCover/Pages/MenuPlayer.xaml.cs	(date 1748121895521)
@@ -22,6 +22,7 @@
             {
                 Placeholder = $"Nom du joueur {i + 1}"
             };
+            entry.Style = (Style)Application.Current.Resources["InputEntryStyle"];
             PlayerInputsLayout.Children.Add(entry);
         }
     }
Index: DataPersistence/Stub.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Diagnostics.CodeAnalysis;\nusing Models.Game;\nusing Models.Interfaces;\n\nnamespace DataPersistence\n{\n    [ExcludeFromCodeCoverage]\n    public class Stub : IDataPersistence\n    {\n        public (List<Player>, List<Game>) LoadData()\n        {\n            // 1) Joueurs initiaux et un unique dÃ©placement sur jordyGrid\n            var jordyGrid = new Grid();\n            var cardToMove = jordyGrid.GetCard(new Position(1, 1));\n            jordyGrid.RemoveCard(new Position(1, 1));\n            jordyGrid.SetCard(new Position(1, 2), cardToMove);\n            var jordy = new Player(\"Jordy\", 11, new List<int> { 5, 6, 3 }, false, true, jordyGrid);\n\n            var jules = new Player(\"Jules\", 12, new List<int> { 4, 7, 2 }, false, false, new Grid());\n\n            var onGoingGame = new Game(\n                id: \"7051E\",\n                players: new List<Player> { jordy, jules },\n                currentPlayerIndex: 1,\n                cardsSkipped: 0,\n                isFinished: false\n            );\n\n            var jordy2 = new Player(\"Jordy2\", 1, new List<int> { 5, 6, 3 }, false, true, new Grid());\n            var jules2 = new Player(\"Jules2\", 3, new List<int> { 4, 7, 2 }, false, false, new Grid());\n            var finishedGame = new Game(\n                id: \"9051e\",\n                players: new List<Player> { jordy2, jules2 },\n                currentPlayerIndex: 0,\n                cardsSkipped: 8,\n                isFinished: true\n            );\n\n            // 4) Jordy1 : nouvelle grille avec 3 dÃ©placements\n            var jordyGrid1 = new Grid();\n            // A) (1,1) -> (2,1)\n            var cardA = jordyGrid1.GetCard(new Position(1, 1));\n            jordyGrid1.RemoveCard(new Position(1, 1));\n            jordyGrid1.SetCard(new Position(2, 1), cardA);\n            // B) (1,2) -> (1,3)\n            var cardB = jordyGrid1.GetCard(new Position(1, 2));\n            jordyGrid1.RemoveCard(new Position(1, 2));\n            jordyGrid1.SetCard(new Position(1, 3), cardB);\n            // C) (2,3) -> (0,0)\n            var cardC = jordyGrid1.GetCard(new Position(2, 3));\n            jordyGrid1.RemoveCard(new Position(2, 3));\n            jordyGrid1.SetCard(new Position(0, 0), cardC);\n            var jordy1 = new Player(\"Jordy1\", 9, new List<int> { 5, 6, 3 }, false, true, jordyGrid1);\n\n            // 5) Jules1 : nouvelle grille avec 3 dÃ©placements\n            var julesGrid1 = new Grid();\n            // D) (2,1) -> (3,1)\n            var cardD = julesGrid1.GetCard(new Position(2, 1));\n            julesGrid1.RemoveCard(new Position(2, 1));\n            julesGrid1.SetCard(new Position(3, 1), cardD);\n            // E) (3,2) -> (3,3)\n            var cardE = julesGrid1.GetCard(new Position(3, 2));\n            julesGrid1.RemoveCard(new Position(3, 2));\n            julesGrid1.SetCard(new Position(3, 3), cardE);\n            // F) (1,4) -> (1,2)\n            var cardF = julesGrid1.GetCard(new Position(1, 4));\n            julesGrid1.RemoveCard(new Position(1, 4));\n            julesGrid1.SetCard(new Position(1, 2), cardF);\n            var jules1 = new Player(\"Jules1\", 9, new List<int> { 4, 7, 2 }, false, false, julesGrid1);\n\n            // 6) Partie âcrazyâ (Code 5051E)\n            var crazyGame = new Game(\n                id: \"5051e\",\n                players: new List<Player> { jordy1, jules1 },\n                currentPlayerIndex: 1,\n                cardsSkipped: 3,\n                isFinished: false\n            );\n\n            // 7) Retour\n            var players = new List<Player> { jordy, jules, jordy2, jules2, jordy1, jules1 };\n            var games = new List<Game> { onGoingGame, finishedGame, crazyGame };\n            return (players, games);\n        }\n\n        public void SaveData(List<Player> players, List<Game> games)\n        {\n            // No-op stub : pas de persistance\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataPersistence/Stub.cs b/DataPersistence/Stub.cs
--- a/DataPersistence/Stub.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/DataPersistence/Stub.cs	(date 1748264190399)
@@ -23,7 +23,9 @@
                 players: new List<Player> { jordy, jules },
                 currentPlayerIndex: 1,
                 cardsSkipped: 0,
-                isFinished: false
+                isFinished: false,
+                deck: new Deck(),
+                lastNumber: null
             );
 
             var jordy2 = new Player("Jordy2", 1, new List<int> { 5, 6, 3 }, false, true, new Grid());
@@ -33,7 +35,9 @@
                 players: new List<Player> { jordy2, jules2 },
                 currentPlayerIndex: 0,
                 cardsSkipped: 8,
-                isFinished: true
+                isFinished: true,
+                deck: new Deck(),
+                lastNumber: 1
             );
 
             // 4) Jordy1 : nouvelle grille avec 3 dÃ©placements
@@ -74,7 +78,9 @@
                 players: new List<Player> { jordy1, jules1 },
                 currentPlayerIndex: 1,
                 cardsSkipped: 3,
-                isFinished: false
+                isFinished: false,
+                deck: new Deck(),
+                lastNumber: 2
             );
 
             // 7) Retour
Index: Models/Game/Game.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Models.Exceptions;\nusing Models.Interfaces;\nusing Models.Rules;\nusing Models.Events;\nusing Models.Enums;\n\nnamespace Models.Game\n{\n    public class Game\n    {\n        public List<Player> Players { get; }\n        public IRules Rules { get; }\n        public int CardsSkipped { get; set; }\n        public Player CurrentPlayer { get; set; }\n        public Deck Deck { get; } = new Deck();\n        public bool Quit { get; set; }\n        public bool IsFinished { get; set; }  \n        public DeckCard CurrentDeckCard { get; set; }\n        public int? LastNumber { get; set; }\n        public string Id { get; }\n\n        private int _currentPlayerIndex;\n        public event EventHandler<PlayerChangedEventArgs>? PlayerChanged;\n        public event EventHandler<GameIsOverEventArgs>? GameIsOver;\n        public event EventHandler<ErrorOccurredEventArgs>? ErrorOccurred;\n        public event EventHandler<PlayerChooseCoinEventArgs>? PlayerChooseCoin;\n        public event EventHandler<PlayerChooseDuckEventArgs>? PlayerChooseDuck;\n        public event EventHandler<PlayerChooseShowPlayersGridEventArgs>? PlayerChooseShowPlayersGrid;\n        public event EventHandler<PlayerChooseQuitEventArgs>? PlayerChooseQuit;\n        public event EventHandler<PlayerChooseCoverEventArgs>? PlayerChooseCover;\n        public event EventHandler<PlayerChooseShowScoresEventArgs>? PlayerChooseShowScores;\n        public event EventHandler<DisplayMenuNeededEventArgs>? DisplayMenuNeeded;\n        protected virtual void OnPlayerChanged(PlayerChangedEventArgs args) => PlayerChanged?.Invoke(this, args);\n        protected virtual void OnErrorOccurred(ErrorOccurredEventArgs args) => ErrorOccurred?.Invoke(this, args);\n        protected virtual void OnGameIsOver(GameIsOverEventArgs args) => GameIsOver?.Invoke(this, args);\n        protected virtual void OnPlayerChooseCoin(PlayerChooseCoinEventArgs args) => PlayerChooseCoin?.Invoke(this, args);\n        protected virtual void OnPlayerChooseDuck(PlayerChooseDuckEventArgs args) => PlayerChooseDuck?.Invoke(this, args);\n        protected virtual void OnDisplayMenuNeeded(DisplayMenuNeededEventArgs args) => DisplayMenuNeeded?.Invoke(this, args);\n        protected virtual void OnPlayerChooseQuit(PlayerChooseQuitEventArgs args) => PlayerChooseQuit?.Invoke(this, args);\n        protected virtual void OnPlayerChooseShowScores(PlayerChooseShowScoresEventArgs args) => PlayerChooseShowScores?.Invoke(this, args);\n        protected virtual void OnPlayerChooseShowPlayersGrid(PlayerChooseShowPlayersGridEventArgs args) => PlayerChooseShowPlayersGrid?.Invoke(this, args);\n        protected virtual void OnPlayerChooseCover(PlayerChooseCoverEventArgs args) => PlayerChooseCover?.Invoke(this, args);\n\n        public Game(List<Player> players)\n        {\n            this.Rules = new ClassicRules();\n            this.Id = Guid.NewGuid().ToString(\"N\").Substring(0, 5);\n            this.Quit = false;\n            this.IsFinished = false;\n            this.Players = players;\n            this.CurrentDeckCard = Deck.Cards.FirstOrDefault()!;\n            this._currentPlayerIndex = 0;\n            this.CurrentPlayer = players[_currentPlayerIndex];\n        }\n\n        public Game(string id, List<Player> players, int currentPlayerIndex, int cardsSkipped, bool isFinished)\n            : this(players)\n        {\n            this.Id = id;\n            this.Rules = new ClassicRules();\n            this.Players = players;\n            this._currentPlayerIndex = currentPlayerIndex;\n            this.CurrentPlayer = players[_currentPlayerIndex];\n            this.CurrentDeckCard = Deck.Cards.FirstOrDefault()!;\n            this.CardsSkipped = cardsSkipped;\n            this.IsFinished = isFinished;\n        }\n\n        public void NextPlayer()\n        {\n            _currentPlayerIndex = (_currentPlayerIndex + 1) % Players.Count;\n            CurrentPlayer = Players[_currentPlayerIndex];\n        }\n        public void GameLoop()\n        {\n            bool isOver = false;\n\n            while (!isOver)\n            {\n                try\n                {\n                    OnPlayerChanged(new PlayerChangedEventArgs(CurrentPlayer, CurrentDeckCard));\n\n                    if (AllPlayersPlayed())\n                    {\n                        NextDeckCard();\n                        Players.ForEach(p =>\n                        {\n                            p.HasPlayed = false;\n                            p.HasSkipped = false;\n                        });\n                    }\n\n                    isOver = CheckGameOverCondition();\n                }\n                catch (Error e)\n                {\n                    OnErrorOccurred(new ErrorOccurredEventArgs(e));\n                }\n            }\n        }\n        \n        public void HandlePlayerChoice(Player player, string choice)\n        {\n            try\n            {\n                switch (choice)\n                {\n                    case \"1\":\n                        OnPlayerChooseCover(new PlayerChooseCoverEventArgs(CurrentPlayer));\n                        break;\n                    case \"2\":\n                        OnPlayerChooseDuck(new PlayerChooseDuckEventArgs(CurrentPlayer));\n                        break;\n                    case \"3\":\n                        OnPlayerChooseCoin(new PlayerChooseCoinEventArgs(CurrentPlayer));\n                        DoCoin(player);\n                        CheckAllPlayersSkipped();\n                        break;\n                    case \"4\":\n                        OnPlayerChooseShowPlayersGrid(new PlayerChooseShowPlayersGridEventArgs(Players));\n                        OnDisplayMenuNeeded(new DisplayMenuNeededEventArgs(CurrentPlayer, CurrentDeckCard));\n                        break;\n                    case \"5\":\n                        OnPlayerChooseShowScores(new PlayerChooseShowScoresEventArgs(Players));\n                        OnDisplayMenuNeeded(new DisplayMenuNeededEventArgs(CurrentPlayer, CurrentDeckCard));\n                        break;\n                    case \"6\":\n                        OnPlayerChooseQuit(new PlayerChooseQuitEventArgs(CurrentPlayer, this));\n                        break;\n                    default:\n                        throw new Error(ErrorCodes.InvalidChoice);\n                }\n            }\n            catch (Error e)\n            {\n                OnErrorOccurred(new ErrorOccurredEventArgs(e));\n            }\n        }\n\n        public void HandlePlayerChooseCover(Player player, Position cardToMovePosition, Position cardToCoverPosition)\n        {\n            try\n            {\n                DoCover(player, cardToMovePosition, cardToCoverPosition);\n            }\n            catch (Error e)\n            {\n                throw new Error(e.ErrorCode);\n            }\n        }\n        \n        public void TriggerGameOver()\n        {\n            OnGameIsOver(new GameIsOverEventArgs(true));\n        }   \n        \n        public void HandlePlayerChooseDuck(Player player, Position cardToMovePosition, Position duckPosition)\n        {\n            try\n            {\n                DoDuck(player, cardToMovePosition, duckPosition);\n            }\n            catch (Error e)\n            {\n                throw new Error(e.ErrorCode);\n            }\n        }\n        \n        public bool CheckGameOverCondition()\n        {\n            if (Rules.IsGameOver(CardsSkipped, CurrentPlayer.StackCounter, Quit))\n            {\n                OnGameIsOver(new GameIsOverEventArgs(true));\n                return true;\n            }\n\n            return false;\n        }\n        \n        public void DoCover(Player player, Position cardToMovePosition, Position cardToCoverPosition)\n        {\n            try\n            {\n                Rules.TryValidMove(cardToMovePosition, cardToCoverPosition, player.Grid, \"cover\", CurrentDeckCard);\n                GameCard cardToMove = player.Grid.GetCard(cardToMovePosition)!;\n                GameCard cardToCover = player.Grid.GetCard(cardToCoverPosition)!;\n                List<GameCard> grid = player.Grid.GameCardsGrid;\n\n                grid.Remove(cardToCover);\n                cardToMove.Position = new Position(cardToCover.Position.Row, cardToCover.Position.Column);\n\n                player.StackCounter = grid.Count;\n                player.HasPlayed = true;\n                \n                NextPlayer();\n            }\n            catch (Error e)\n            {\n                throw new Error(e.ErrorCode);\n            }\n        }\n\n        public void DoDuck(Player player, Position cardToMovePosition, Position duckPosition)\n        {\n            try\n            {\n                Rules.TryValidMove(cardToMovePosition, duckPosition, player.Grid, \"duck\", CurrentDeckCard);\n                GameCard cardToMove = player.Grid.GetCard(cardToMovePosition)!;\n\n                player.Grid.RemoveCard(cardToMove.Position);\n                player.Grid.SetCard(duckPosition, cardToMove);\n\n                player.StackCounter = player.Grid.GameCardsGrid.Count;\n                player.HasPlayed = true;\n            \n                NextPlayer();\n            }\n            catch (Error e)\n            {\n                throw new Error(e.ErrorCode);\n            }\n        }\n\n        public void DoCoin(Player player)\n        {\n            player.StackCounter = player.Grid.GameCardsGrid.Count;\n            player.HasPlayed = true;\n            player.HasSkipped = true;\n            \n            NextPlayer();\n        }\n        \n        public DeckCard NextDeckCard()\n        {\n            if (Deck.Cards.Count == 0)\n                throw new Error(ErrorCodes.DeckEmpty);\n\n            Deck.Cards.RemoveAt(0);\n\n            if (Deck.Cards.Count == 0)\n                CurrentDeckCard = null!;\n            else\n                CurrentDeckCard = Deck.Cards.First();\n\n            return CurrentDeckCard!;\n        }\n\n        public void Save()\n        {\n            foreach (var player in Players)\n            {\n                int score = player.Grid.GameCardsGrid.Sum(card => card.Splash);\n                player.Scores.Add(score);\n            }\n        }\n\n        public bool AllPlayersPlayed()\n        {\n            return Players.All(p => p.HasPlayed);\n        }\n        \n        public void CheckAllPlayersSkipped()\n        {\n            if (Players.All(p => p.HasSkipped))\n            {\n                CardsSkipped++;\n            }\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/Game/Game.cs b/Models/Game/Game.cs
--- a/Models/Game/Game.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/Models/Game/Game.cs	(date 1748264163829)
@@ -1,3 +1,4 @@
+using System.Runtime.Serialization;
 using Models.Exceptions;
 using Models.Interfaces;
 using Models.Rules;
@@ -6,20 +7,40 @@
 
 namespace Models.Game
 {
+    [DataContract]
     public class Game
     {
+        
+        [DataMember]
+        public string Id { get; }
+        
+        [DataMember]
         public List<Player> Players { get; }
+        
         public IRules Rules { get; }
+        
+        [DataMember]
         public int CardsSkipped { get; set; }
+        
         public Player CurrentPlayer { get; set; }
+        
+        [DataMember]
+        private int _currentPlayerIndex;
+        
+        [DataMember]
         public Deck Deck { get; } = new Deck();
+        
         public bool Quit { get; set; }
+        
+        [DataMember]
         public bool IsFinished { get; set; }  
-        public DeckCard CurrentDeckCard { get; set; }
+        
+        public DeckCard CurrentDeckCard { get; private set; }
+        
+        [DataMember]
         public int? LastNumber { get; set; }
-        public string Id { get; }
 
-        private int _currentPlayerIndex;
+        
         public event EventHandler<PlayerChangedEventArgs>? PlayerChanged;
         public event EventHandler<GameIsOverEventArgs>? GameIsOver;
         public event EventHandler<ErrorOccurredEventArgs>? ErrorOccurred;
@@ -53,17 +74,19 @@
             this.CurrentPlayer = players[_currentPlayerIndex];
         }
 
-        public Game(string id, List<Player> players, int currentPlayerIndex, int cardsSkipped, bool isFinished)
+        public Game(string id, List<Player> players, int currentPlayerIndex, int cardsSkipped, bool isFinished, Deck deck, int? lastNumber)
             : this(players)
         {
             this.Id = id;
             this.Rules = new ClassicRules();
             this.Players = players;
+            this.Deck = deck;
             this._currentPlayerIndex = currentPlayerIndex;
             this.CurrentPlayer = players[_currentPlayerIndex];
             this.CurrentDeckCard = Deck.Cards.FirstOrDefault()!;
             this.CardsSkipped = cardsSkipped;
             this.IsFinished = isFinished;
+            this.LastNumber = lastNumber;
         }
 
         public void NextPlayer()
Index: Models/Interfaces/IDataPersistence.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Models.Game;\nusing GameModel = Models.Game.Game;\nnamespace Models.Interfaces\n{\n    public interface IDataPersistence\n    {\n        (List<Player>, List<GameModel>) LoadData();\n\n        void SaveData(List<Player> players, List<GameModel> games);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/Interfaces/IDataPersistence.cs b/Models/Interfaces/IDataPersistence.cs
--- a/Models/Interfaces/IDataPersistence.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/Models/Interfaces/IDataPersistence.cs	(date 1748264745517)
@@ -1,10 +1,11 @@
 using Models.Game;
 using GameModel = Models.Game.Game;
+using System.Collections.ObjectModel;
 namespace Models.Interfaces
 {
     public interface IDataPersistence
     {
-        (List<Player>, List<GameModel>) LoadData();
+        (ObservableCollection<Player>, ObservableCollection<GameModel>) LoadData();
 
         void SaveData(List<Player> players, List<GameModel> games);
     }
Index: DuckAndCover/Pages/GameMenu.xaml.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using DTOs;\nnamespace DuckAndCover.Pages;\n\npublic partial class GameMenu : ContentPage\n{\n    public GameMenu()\n    {\n        InitializeComponent();\n        UpdateBotCountVisibility(BotSwitch.IsToggled);\n    }\n\n    private void BotSwitch_Toggled(object sender, ToggledEventArgs e)\n    {\n        UpdateBotCountVisibility(e.Value);\n    }\n\n    private void UpdateBotCountVisibility(bool isVisible)\n    {\n        BotCountEntry.IsVisible = isVisible;\n        BotCountLabel.IsVisible = isVisible;\n    }\n\n    private async void ContinueClicked(object sender, EventArgs e)\n    {\n        int.TryParse(PlayerCountEntry.Text, out int playerCount);\n        int.TryParse(BotCountEntry.Text, out int botCount);\n\n        var dto = new GameSettingsDTO\n        {\n            PlayerCount = playerCount,\n            UseBots = BotSwitch.IsToggled,\n            BotCount = BotSwitch.IsToggled ? botCount : 0,\n        };\n\n        await Navigation.PushAsync(new MenuPlayer(dto));\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DuckAndCover/Pages/GameMenu.xaml.cs b/DuckAndCover/Pages/GameMenu.xaml.cs
--- a/DuckAndCover/Pages/GameMenu.xaml.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/DuckAndCover/Pages/GameMenu.xaml.cs	(date 1747980931724)
@@ -31,6 +31,12 @@
             UseBots = BotSwitch.IsToggled,
             BotCount = BotSwitch.IsToggled ? botCount : 0,
         };
+        
+        if (playerCount < 1)
+        {
+            await DisplayAlert("Erreur", "Le nombre de joueurs doit Ãªtre supÃ©rieur Ã  0.", "OK");
+            return;
+        }
 
         await Navigation.PushAsync(new MenuPlayer(dto));
     }
Index: DuckAndCover/Pages/TestGame.xaml.cs
===================================================================
diff --git a/DuckAndCover/Pages/TestGame.xaml.cs b/DuckAndCover/Pages/TestGame.xaml.cs
deleted file mode 100644
--- a/DuckAndCover/Pages/TestGame.xaml.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ /dev/null	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
@@ -1,20 +0,0 @@
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-using Xamarin.Forms;
-using Xamarin.Forms.Xaml;
-
-namespace DuckAndCover.Pages
-{
-    [XamlCompilation(XamlCompilationOptions.Compile)]
-    public partial class TestGame : ContentView
-    {
-        public TestGame()
-        {
-            InitializeComponent();
-        }
-    }
-}
\ No newline at end of file
Index: DuckAndCover/Views/TempCard.xaml
===================================================================
diff --git a/DuckAndCover/Views/TempCard.xaml b/DuckAndCover/Views/TempCard.xaml
deleted file mode 100644
--- a/DuckAndCover/Views/TempCard.xaml	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ /dev/null	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<Label
-    x:Name="TempCard"
-    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
-    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
-    x:Class="DuckAndCover.Views.TestGame"
-    Spacing="10"
-
-           HorizontalOptions="Center"
-           VerticalOptions="Center"
-           BackgroundColor="White"/>
-
Index: DuckAndCover/Pages/TestGame.xaml
===================================================================
diff --git a/DuckAndCover/Pages/TestGame.xaml b/DuckAndCover/Pages/TestGame.xaml
deleted file mode 100644
--- a/DuckAndCover/Pages/TestGame.xaml	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ /dev/null	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
@@ -1,11 +0,0 @@
-<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
-             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
-             x:Class="DuckAndCover.Pages.TestGame"
-             Title="TestGame">
-    
-  <ContentView.Content>
-      <StackLayout>
-          <Label Text="Hello Xamarin.Forms!" />
-      </StackLayout>
-  </ContentView.Content>
-</ContentView>
\ No newline at end of file
Index: DuckAndCover/Views/TempCard.xaml.cs
===================================================================
diff --git a/DuckAndCover/Views/TempCard.xaml.cs b/DuckAndCover/Views/TempCard.xaml.cs
deleted file mode 100644
--- a/DuckAndCover/Views/TempCard.xaml.cs	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ /dev/null	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
@@ -1,20 +0,0 @@
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-using Xamarin.Forms;
-using Xamarin.Forms.Xaml;
-
-namespace DuckAndCover.Views
-{
-    [XamlCompilation(XamlCompilationOptions.Compile)]
-    public partial class TempCard : ContentView
-    {
-        public TempCard()
-        {
-            InitializeComponent();
-        }
-    }
-}
\ No newline at end of file
Index: DataPersistence/PersistenceJSON.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataPersistence/PersistenceJSON.cs b/DataPersistence/PersistenceJSON.cs
new file mode 100644
--- /dev/null	(date 1748264657749)
+++ b/DataPersistence/PersistenceJSON.cs	(date 1748264657749)
@@ -0,0 +1,35 @@
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Linq;
+using System.Runtime.Serialization;
+using System.Text;
+using System.Threading.Tasks;
+using System.Xml;
+using System.Runtime.Serialization.Json;
+using System.IO;
+using System.Xml.Serialization;
+using System.Collections.ObjectModel;
+using System.Text.Json;
+using Models.Game;
+using Models.Interfaces;
+
+namespace DataPersistence
+{
+    public class PersistenceJSON : IDataPersistence
+    {
+        public string FileName { get; set; } = "duckAndCover.json";
+        
+        public (ObservableCollection<Player>, ObservableCollection<Game>) LoadData()
+        {
+            var JsonSerializer = new DataContractJsonSerializer(typeof(DataToPersist));
+            DataToPersist? data = new DataToPersist();
+
+            using (Stream s = File.OpenRead(Path.Combine(FilePath, FileName)))
+            {
+                data = JsonSerializer.ReadObject(s) as DataToPersist;
+            }
+            return (data.Players, data.Games);
+        }
+    }
+}
\ No newline at end of file
Index: DuckAndCover/Pages/MenuPlayer.xaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"DuckAndCover.Pages.MenuPlayer\"\n             ControlTemplate=\"{StaticResource BackgroundTemplate}\">\n\n    <ScrollView>\n        <VerticalStackLayout x:Name=\"PlayerInputsLayout\"\n                             Spacing=\"20\"\n                             Padding=\"20\" />\n    </ScrollView>\n</ContentPage>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DuckAndCover/Pages/MenuPlayer.xaml b/DuckAndCover/Pages/MenuPlayer.xaml
--- a/DuckAndCover/Pages/MenuPlayer.xaml	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/DuckAndCover/Pages/MenuPlayer.xaml	(date 1748121800081)
@@ -2,11 +2,18 @@
 <ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
              xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
              x:Class="DuckAndCover.Pages.MenuPlayer"
+                xmlns:components="clr-namespace:DuckAndCover.Views"
              ControlTemplate="{StaticResource BackgroundTemplate}">
 
-    <ScrollView>
+    <ScrollView Padding="10" Margin="0, 0, 0, 300">
         <VerticalStackLayout x:Name="PlayerInputsLayout"
                              Spacing="20"
-                             Padding="20" />
+                             Padding="20"
+                             MaximumWidthRequest="800"/>
+        
+        <components:Button x:Name="PlayBtn"
+                           Name="Jouer"
+                           Margin="10,0"
+                           Clicked="PlayClicked" />
     </ScrollView>
 </ContentPage>
Index: DuckAndCover/AppShell.xaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<Shell\n    x:Class=\"DuckAndCover.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:pages=\"clr-namespace:DuckAndCover.Pages\"\n    FlyoutBehavior=\"Flyout\"\n    Shell.NavBarIsVisible=\"False\"\n    Title=\"DuckAndCover\">\n    \n    <!-- Test2 -->\n\n    <ShellContent\n        Title=\"Home\"\n        ContentTemplate=\"{DataTemplate pages:Home}\"\n        Route=\"Home\" />\n\n    <ShellContent\n        Title=\"Jouer\"\n        ContentTemplate=\"{DataTemplate pages:GameMenu}\"\n        Route=\"GameMenu\" />\n\n    <ShellContent\n        Title=\"CrÃ©dits\"\n        ContentTemplate=\"{DataTemplate pages:Credits}\"\n        Route=\"Credits\" />\n\n    <ShellContent\n        Title=\"RÃ¨gles\"\n        ContentTemplate=\"{DataTemplate pages:Rules}\"\n        Route=\"Rules\" />\n\n    <ShellContent\n        Title=\"MenuJoueur\"\n        ContentTemplate=\"{DataTemplate pages:MenuPlayer}\"\n        Route=\"MenuPlayer\" />\n\n    <ShellContent\n        Title=\"TestGame\"\n        ContentTemplate=\"{DataTemplate pages:TestGame}\"\n        Route=\"TestGame\" />\n\n\n</Shell>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DuckAndCover/AppShell.xaml b/DuckAndCover/AppShell.xaml
--- a/DuckAndCover/AppShell.xaml	(revision 9b877b0f019ef4e751b7e5b29c1780aaa3b2b50a)
+++ b/DuckAndCover/AppShell.xaml	(date 1747980514964)
@@ -8,8 +8,6 @@
     FlyoutBehavior="Flyout"
     Shell.NavBarIsVisible="False"
     Title="DuckAndCover">
-    
-    <!-- Test2 -->
 
     <ShellContent
         Title="Home"
@@ -36,10 +34,6 @@
         ContentTemplate="{DataTemplate pages:MenuPlayer}"
         Route="MenuPlayer" />
 
-    <ShellContent
-        Title="TestGame"
-        ContentTemplate="{DataTemplate pages:TestGame}"
-        Route="TestGame" />
 
 
 </Shell>
\ No newline at end of file
