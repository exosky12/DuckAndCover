Index: Models/Game/Position.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Models.Game\n{\n    public sealed class Position : IEquatable<Position>\n    {\n        public int Row { get; private set; }\n        public int Column { get; private set; }\n\n        public Position(int row, int column)\n        {\n            this.Row = row;\n            this.Column = column;\n        }\n\n\n        public bool Equals(Position? other)\n        {\n            if (other is null) return false;\n            return Row == other.Row && Column == other.Column;\n        }\n\n        public override bool Equals(object? obj)\n        {\n            return Equals(obj as Position);\n        }\n\n        public override int GetHashCode()\n        {\n            return HashCode.Combine(Row, Column);\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/Game/Position.cs b/Models/Game/Position.cs
--- a/Models/Game/Position.cs	(revision 0c6f197ec4ea4f21524dc418c870a5e9cbc2f480)
+++ b/Models/Game/Position.cs	(date 1747430172615)
@@ -10,8 +10,7 @@
             this.Row = row;
             this.Column = column;
         }
-
-
+        
         public bool Equals(Position? other)
         {
             if (other is null) return false;
Index: ConsoleApp/Utils.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using static System.Console;\nusing Model;\nusing Model.Exceptions;\nusing Model.Enums;\nusing System.Diagnostics.CodeAnalysis;\n\nnamespace ConsoleApp;\n\n[ExcludeFromCodeCoverage]\npublic static class Utils\n{\n    public static void DisplayMenu()\n    {\n        WriteLine(\"\\n1. Cover (recouvrir une carte)\");\n        WriteLine(\"2. Duck (déplacer une carte)\");\n        WriteLine(\"3. Call Coin (passer son tour)\");\n        WriteLine(\"4. Afficher les grilles de tous les joueurs\");\n        WriteLine(\"5. Afficher les scores\");\n        WriteLine(\"6. Quitter la partie\");\n    }\n\n    public static void DisplayTopSeparator(string title)\n    {\n        WriteLine($\"\\n╔════════════════════ {title} ════════════════════╗\");\n    }\n\n    public static void DisplayBottomSeparator()\n    {\n        WriteLine(\"\\n╚══════════════════════════════════════════════════════╝\");\n    }\n\n    public static void DisplayGrid(Player player)\n    {\n        DisplayTopSeparator(\"GRILLE DE JEU\");\n\n        if (player.Grid.GameCardsGrid.Count == 0)\n        {\n            WriteLine(\"│                Grille actuellement vide                 │\");\n            DisplayBottomSeparator();\n            return;\n        }\n\n        var positions = new List<Position>();\n        foreach (var card in player.Grid.GameCardsGrid)\n            positions.Add(card.Position);\n\n        var (minX, maxX, minY, maxY) = Grid.GetBounds(positions);\n\n        Write(\"    \");\n        for (int col = minX; col <= maxX; col++)\n        {\n            Write($\"   {col}    \");\n        }\n\n        WriteLine();\n\n        Write(\"    \");\n        for (int col = minX; col <= maxX; col++)\n        {\n            Write(\"────────\");\n        }\n\n        WriteLine();\n\n        for (int row = minY; row <= maxY; row++)\n        {\n            Write($\" {row} │\");\n\n            for (int col = minX; col <= maxX; col++)\n            {\n                var card = player.Grid.GetCard(new Position(row, col));\n                if (card != null)\n                {\n                    SetSplashColor(card.Splash);\n                    Write($\"{card.Number} - {card.Splash} \");\n                    ResetColor();\n                    Write(\"│\");\n                }\n                else\n                {\n                    Write($\"        │\");\n                }\n            }\n\n            WriteLine();\n\n            Write(\"    \");\n            for (int col = minX; col <= maxX; col++)\n            {\n                Write(\"────────\");\n            }\n\n            WriteLine();\n        }\n\n        DisplayBottomSeparator();\n    }\n\n    public static void SetSplashColor(int splash)\n    {\n        if (splash == 0)\n        {\n            ForegroundColor = ConsoleColor.White;\n        }\n        else if (splash == 1)\n        {\n            ForegroundColor = ConsoleColor.Yellow;\n        }\n        else if (splash == 2)\n        {\n            ForegroundColor = ConsoleColor.DarkYellow;\n        }\n        else if (splash == 3)\n        {\n            ForegroundColor = ConsoleColor.Red;\n        }\n        else if (splash == 4)\n        {\n            ForegroundColor = ConsoleColor.DarkRed;\n        }\n        else\n        {\n            ForegroundColor = ConsoleColor.Magenta;\n        }\n    }\n\n    public static string DisplayCard(DeckCard card)\n    {\n        string cardDisplay;\n\n        if (card.Bonus == Bonus.Max)\n        {\n            cardDisplay = \"MAX\";\n        }\n        else if (card.Bonus == Bonus.Again)\n        {\n            cardDisplay = \"AGAIN\";\n        }\n        else\n        {\n            cardDisplay = $\"{card.Number:D2}\";\n        }\n\n        return cardDisplay;\n    }\n\n    public static void DisplayPlayerScores(List<Player> players)\n    {\n        foreach (Player p in players)\n        {\n            WriteLine($\"  {p.Name}: {p.TotalScore} points\");\n        }\n    }\n\n    public static Position ParsePosition(string input)\n    {\n        string[] parts = input.Split(',');\n        if (parts.Length != 2)\n            //\"Format de position invalide. Utilisez le format: ligne,colonne\"\n            throw new Error(1);\n\n        if (!int.TryParse(parts[0].Trim(), out int row) || !int.TryParse(parts[1].Trim(), out int col))\n            // Les valeurs de ligne et colonne doivent être numériques\n            throw new Error(1);\n\n        return new Position(row, col);\n    }\n\n    public static void WriteGameMaster(string message)\n    {\n        ConsoleColor originalColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.Cyan;\n        WriteLine($\"\\n[Maître du jeu] {message}\");\n        ForegroundColor = originalColor;\n    }\n\n    public static void PromptPlayerTurn(Player player, DeckCard card, Game game)\n    {\n        Clear();\n        WriteGameMaster($\"\\nC'est au tour de {player.Name}\");\n        DisplayGrid(player);\n        DisplayMenu();\n        WriteGameMaster(\"Que souhaitez-vous faire ?\");\n        ProcessCardEffect(card, player, game);\n\n        Write(\"\\nVotre choix: \");\n        \n    }\n\n    public static int AskNumberOfPlayers()\n    {\n        WriteGameMaster(\"Combien de joueurs ?\");\n        if (int.TryParse(ReadLine()!, out int nbJoueur)) return nbJoueur;\n        return -1;\n    }\n\n    public static List<Player> InitializePlayers(int count)\n    {\n        var players = new List<Player>();\n        while (players.Count < count)\n        {\n            WriteGameMaster($\"Pseudo du joueur numéro {players.Count + 1}:\");\n            string name = ReadLine()!;\n            while (string.IsNullOrWhiteSpace(name))\n            {\n                WriteGameMaster(\"Pseudo invalide, changez le pseudo.\");\n                name = ReadLine()!;\n            }\n\n            players.Add(new Player(name));\n            WriteGameMaster($\"Joueur {name} ajouté avec succès!\");\n        }\n\n        return players;\n    }\n\n    public static void RunGameLoop(List<Player> players, Game game, Deck deck)\n    {\n        bool exitGame = false;\n        while (!exitGame)\n        {\n            if (deck.Cards.Count == 0)\n            {\n                WriteGameMaster(\"Le deck est vide. La partie est terminée !\");\n                break;\n            }\n\n            DeckCard card = deck.Cards[0];\n            Player currentPlayer = game.CurrentPlayer;\n\n            game.CheckGameOverCondition();\n\n            if (game.Rules.IsGameOver(game.CardPassed, currentPlayer.StackCounter))\n            {\n                break;\n            }\n\n            string choice = ReadLine()!;\n            exitGame = HandlePlayerChoice(choice, currentPlayer, game, players, card);\n        }\n    }\n\n    public static void ProcessCardEffect(DeckCard card, Player player, Game game)\n    {\n        switch (card.Bonus)\n        {\n            case Bonus.Again when game.LastNumber.HasValue:\n                card.Number = game.LastNumber.Value;\n                WriteGameMaster($\"Carte Again active ! Le numéro utilisé est {card.Number}\");\n                break;\n            case Bonus.Max:\n                int max = player.Grid.GameCardsGrid.Max(c => c.Number);\n                card.Number = max;\n                WriteGameMaster($\"Carte MAX ! Numéro utilisé : {max} (grille de {player.Name})\");\n                break;\n            default:\n                game.LastNumber = card.Number;\n                string msg = card.Number == 0 ? card.Bonus.ToString() : card.Number.ToString();\n                WriteGameMaster($\"Carte actuelle du deck : {msg}\");\n                break;\n        }\n    }\n\n    public static bool AllPlayersPlayed(List<Player> players) => players.All(p => p.HasPlayed);\n\n    public static void HandleAllPlayed(Deck deck, Game game, List<Player> players)\n    {\n        if(players.All(p => p.HasPassed))\n        {\n            WriteGameMaster(\"Tous les joueurs ont passé leur tour. Carte défaussée.\");\n            game.CardPassed++;\n        }\n        else WriteGameMaster(\"Tous les joueurs ont joué. Carte retirée du deck.\");\n        game.Deck.Cards.RemoveAt(0);\n        players.ForEach(p => p.HasPassed = false);\n        players.ForEach(p => p.HasPlayed = false);\n    }\n\n    public static void EndGame(List<Player> players, Game game)\n    {\n        WriteGameMaster(\"La partie est terminée !\");\n        game.Save();\n        DisplayPlayerScores(players);\n    }\n\n    public static bool HandlePlayerChoice(string choice, Player player, Game game, List<Player> players, DeckCard card)\n    {\n        if (AllPlayersPlayed(players))\n        {\n            HandleAllPlayed(game.Deck, game, players);\n        }\n        switch (choice)\n        {\n            case \"1\":\n                PerformCoverAction(player, game);\n                player.HasPlayed = true;\n                game.NotifyPlayerChanged();\n                break;\n            case \"2\":\n                PerformDuckAction(player, game);\n                player.HasPlayed = true;\n                game.NotifyPlayerChanged();\n                break;\n            case \"3\":\n                WriteGameMaster($\"{player.Name} dit : Coin !\");\n                game.CallCoin(player);\n                player.HasPassed = true;\n                player.HasPlayed = true;\n                game.NotifyPlayerChanged();\n                break;\n            case \"4\":\n                players.ForEach(p =>\n                {\n                    WriteGameMaster($\"Grille de {p.Name}:\");\n                    DisplayGrid(p);\n                });\n                break;\n            case \"5\":\n                DisplayPlayerScores(players);\n                break;\n            case \"6\":\n                WriteGameMaster(\"Merci d'avoir joué à Duck&Cover!\");\n                return true;\n            default:\n                WriteGameMaster(\"Choix invalide. Veuillez réessayer.\");\n                break;\n        }\n\n        return false;\n    }\n\n    private static void PerformCoverAction(Player player, Game game)\n    {\n        WriteGameMaster(\"Quelle carte souhaitez-vous utiliser pour recouvrir?\");\n        WriteGameMaster(\"Entrez la position (ligne,colonne) - exemple: 1,1\");\n        string fromPosition = ReadLine()!;\n\n        WriteGameMaster(\"Quelle carte souhaitez-vous recouvrir?\");\n        WriteGameMaster(\"Entrez la position (ligne,colonne) - exemple: 1,2\");\n        string toPosition = ReadLine()!;\n\n        try\n        {\n            game.DoCover(player, ParsePosition(fromPosition), ParsePosition(toPosition));\n            // var fromPos = ParsePosition(fromPosition);\n            // var toPos = ParsePosition(toPosition);\n            //\n            // GameCard? fromCard = player.Grid.GetCard(fromPos);\n            // GameCard? toCard = player.Grid.GetCard(toPos);\n            //\n            // if (fromCard == null || toCard == null)\n            // {\n            //     WriteGameMaster(\"Une des positions ne contient pas de carte!\");\n            //     return;\n            // }\n            //\n            // if (!game.Rules.isTheSameCard(fromCard, currentDeckCard))\n            // {\n            //     WriteGameMaster(\"Impossible de jouer cette carte car ce n'est pas la carte actuelle\");\n            //     return;\n            // }\n            //\n            // WriteGameMaster($\"Tentative de recouvrir la carte {toCard.Number} (splash {toCard.Splash}) \" +\n            //                 $\"avec la carte {fromCard.Number} (splash {fromCard.Splash})\");\n            //\n            // bool success = player.Cover(fromCard, toCard, player.Grid, game);\n            //\n            // if (success)\n            // {\n            //     WriteGameMaster(\"Recouvrement réussi!\");\n            // }\n            // else WriteGameMaster(\"Recouvrement impossible avec ces cartes.\");\n        }\n        catch (Error e)\n        {\n            ErrorHandler errorHandler = new ErrorHandler(e.ErrorCode);\n            string errorMessage = errorHandler.Handle();\n            WriteGameMaster($\"Erreur: {errorMessage}\");\n        }\n    }\n\n    private static void PerformDuckAction(Player player, Game game)\n    {\n        WriteGameMaster(\"Quelle carte souhaitez-vous déplacer?\");\n        WriteGameMaster(\"Entrez la position (ligne,colonne) - exemple: 1,1\");\n        string fromPosition = ReadLine()!;\n\n        WriteGameMaster(\"Où souhaitez-vous la déplacer?\");\n        WriteGameMaster(\"Entrez la nouvelle position (ligne,colonne) - exemple: 2,3\");\n        string toPosition = ReadLine()!;\n        try\n        {\n            game.DoDuck(player, ParsePosition(fromPosition), ParsePosition(toPosition));\n            // var fromPos = ParsePosition(fromPosition);\n            // var toPos = ParsePosition(toPosition);\n            //\n            // GameCard? cardToMove = player.Grid.GetCard(fromPos);\n            //\n            // if (cardToMove == null)\n            // {\n            //     WriteGameMaster(\"Aucune carte à déplacer à cette position.\");\n            //     return;\n            // }\n            //\n            // bool success = player.Duck(cardToMove, toPos, player.Grid, game);\n            //\n            // if (success)\n            // {\n            //     WriteGameMaster(\"Déplacement effectué avec succès.\");\n            // }\n            // else\n            // {\n            //     WriteGameMaster(\"Déplacement impossible.\");\n            // }\n        }\n        catch (Error e)\n        {\n            ErrorHandler errorHandler = new ErrorHandler(e.ErrorCode);\n            string errorMessage = errorHandler.Handle();\n            WriteGameMaster($\"Erreur: {errorMessage}\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ConsoleApp/Utils.cs b/ConsoleApp/Utils.cs
--- a/ConsoleApp/Utils.cs	(revision 0c6f197ec4ea4f21524dc418c870a5e9cbc2f480)
+++ b/ConsoleApp/Utils.cs	(date 1747430129346)
@@ -1,7 +1,7 @@
 using static System.Console;
-using Model;
-using Model.Exceptions;
-using Model.Enums;
+using Models.Game;
+using Models.Exceptions;
+using Models.Enums;
 using System.Diagnostics.CodeAnalysis;
 
 namespace ConsoleApp;
Index: ConsoleApp/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Model;\nusing System.Diagnostics.CodeAnalysis;\n\nnamespace ConsoleApp\n{\n    [ExcludeFromCodeCoverage]\n    static class Program\n    {\n        static void Main()\n        {\n            ShowTitle();\n            int nbJoueur = Utils.AskNumberOfPlayers();\n            if (nbJoueur <= 0)\n            {\n                Utils.WriteGameMaster(\"Nombre de joueurs invalide. Veuillez redémarrer le jeu.\");\n                return;\n            }\n\n            List<Player> players = Utils.InitializePlayers(nbJoueur);\n            Game game = new Game(players);\n            Deck deck = game.Deck;\n            \n            game.OnPlayerChanged += player => Utils.PromptPlayerTurn(player, game.Deck.Cards[0], game);\n            game.OnGameOver += () => Utils.EndGame(players, game);\n\n            game.NotifyPlayerChanged();\n            Utils.RunGameLoop(players, game, deck);\n        }\n\n        static void ShowTitle()\n        {\n            string title = @\"\n______            _     ___            _ _____                     \n|  _  \\          | |   / _ \\          | /  __ \\                    \n| | | |_   _  ___| | _/ /_\\ \\_ __   __| | /  \\/ _____   _____ _ __ \n| | | | | | |/ __| |/ /  _  | '_ \\ / _` | |    / _ \\ \\ / / _ \\ '__|\n| |/ /| |_| | (__|   <| | | | | | | (_| | \\__/\\ (_) \\ V /  __/ |   \n|___/  \\__,_|\\___|_|\\_\\_| |_|_| |_|\\__,_|\\____/\\___/ \\_/ \\___|_|   \n                                                                   \n                                                                   \n\";\n            Utils.WriteGameMaster(title);\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ConsoleApp/Program.cs b/ConsoleApp/Program.cs
--- a/ConsoleApp/Program.cs	(revision 0c6f197ec4ea4f21524dc418c870a5e9cbc2f480)
+++ b/ConsoleApp/Program.cs	(date 1747430129354)
@@ -1,4 +1,4 @@
-using Model;
+using Models.Game;
 using System.Diagnostics.CodeAnalysis;
 
 namespace ConsoleApp
